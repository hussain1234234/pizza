getgenv().refreash = false
local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()
local GUI = Mercury:Create{
    Name = "Mercury",
    Size = UDim2.fromOffset(600, 400),
    Theme = Mercury.Themes.Dark,
    Link = "https://www.roblox.com/users/1773024222/profile"
}
local Tab = GUI:Tab{
	Name = "Commands",
	Icon = "rbxassetid://7733924046"
}
getgenv().loopcolor = false
getgenv().togglefire = false
getgenv().loopupoort = false
loadstring(game:HttpGet(('https://raw.githubusercontent.com/hussain1234234/pizza/main/bring'),true))()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/hussain1234234/pizza/main/spamming'),true))()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/hussain1234234/pizza/main/kick'),true))()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/hussain1234234/pizza/main/car%20spam%20color'),true))()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/hussain1234234/pizza/main/nofire'),true))()
getgenv().spam = false
getgenv().kill = false
_G.loopkill = false
local lp = game.Players.LocalPlayer
local check = game:GetService("Workspace").Houses:FindFirstChild(game.Players.LocalPlayer.Name, true)
local Trap = workspace:FindFirstChild("Shark Tank",true)
local p1 = game.Players.LocalPlayer.Character.HumanoidRootPart
local char = lp.Character
Tab:Toggle{
	Name = "Turn Loops",
	StartingState = false,
	Description = nil,
	Callback = function(state) 
    getgenv().spam = (state)
    getgenv().spamchatt = (state)
    getgenv().kill = (state)
    end
}
local MyDropdown = Tab:Dropdown{
	Name = "Kill",
	StartingText = "Select...",
	Description = nil,
	Items = {
    game.Players:GetChildren()[2],
    game.Players:GetChildren()[3],
    game.Players:GetChildren()[4],
    game.Players:GetChildren()[5],
    game.Players:GetChildren()[6],
    game.Players:GetChildren()[7],
    game.Players:GetChildren()[8],
    game.Players:GetChildren()[9],
    game.Players:GetChildren()[10],
    game.Players:GetChildren()[11],
    game.Players:GetChildren()[12],
	},
	Callback = function(plrnameee) 
    die(plrnameee)
return end
}
local Dropdwn = Tab:Dropdown{
	Name = "LoopKill",
	StartingText = "Select...",
	Description = nil,
	Items = {
    game.Players:GetChildren()[2],
    game.Players:GetChildren()[3],
    game.Players:GetChildren()[4],
    game.Players:GetChildren()[5],
    game.Players:GetChildren()[6],
    game.Players:GetChildren()[7],
    game.Players:GetChildren()[8],
    game.Players:GetChildren()[9],
    game.Players:GetChildren()[10],
    game.Players:GetChildren()[11],
    game.Players:GetChildren()[12],
	},
	Callback = function(textt) 
        kill(textt)
return end
}
    local Dropdwn1 = Tab:Dropdown{
        Name = "Kick",
        StartingText = "Select...",
        Description = nil,
        Items = {
        game.Players:GetChildren()[2],
        game.Players:GetChildren()[3],
        game.Players:GetChildren()[4],
        game.Players:GetChildren()[5],
        game.Players:GetChildren()[6],
        game.Players:GetChildren()[7],
        game.Players:GetChildren()[8],
        game.Players:GetChildren()[9],
        game.Players:GetChildren()[10],
        game.Players:GetChildren()[11],
        game.Players:GetChildren()[12],
        },
        Callback = function(kicked) 
            kickk(kicked.Name)
    return end
    }
   
        local Dropdwn2 = Tab:Dropdown{
            Name = "Bring",
            StartingText = "Select...",
            Description = nil,
            Items = {
            game.Players:GetChildren()[2],
            game.Players:GetChildren()[3],
            game.Players:GetChildren()[4],
            game.Players:GetChildren()[5],
            game.Players:GetChildren()[6],
            game.Players:GetChildren()[7],
            game.Players:GetChildren()[8],
            game.Players:GetChildren()[9],
            game.Players:GetChildren()[10],
            game.Players:GetChildren()[11],
            game.Players:GetChildren()[12],
            },
            Callback = function(bringed) 
                bring(bringed.Name)
        return end
        }
    Tab:Textbox{
        Name = "Spam",
        Callback = function(UrTextHere) 
            spamchat(UrTextHere)
        end
    }
Tab:Toggle{
	Name = "LoopKill All",
	StartingState = false,
	Description = nil,
	Callback = function(state)
        _G.loopkill = (bool)
         if _G.loopkill then
        loopkillll()
        end
    end
}
Tab:Toggle{
	Name = "Anti-Oven Fire",
	StartingState = false,
	Description = nil,
	Callback = function(state) 
        getgenv().togglefire = (state)
     if getgenv().togglefire then
        nofire()
        end
    end
}
Tab:Toggle{
	Name = "Rainbow Cars",
	StartingState = false,
	Description = nil,
	Callback = function(state) 
        getgenv().loopcolor = (state)
     if getgenv().loopcolor then
        spamcolor()
        end
    end
}
Tab:Toggle{
	Name = "Unanchored Trees",
	StartingState = false,
	Description = nil,
	Callback = function(state) 
    	getgenv().loopupoort = (state)
	    if getgenv().loopupoort then
		killtree()
	    end
    end
}
Tab:Toggle{
	Name = "Auto Refresh",
	StartingState = false,
	Description = nil,
	Callback = function(state) 
        getgenv().refreash = (state)
        if getgenv().refreash then
            looprefreashh()
        end
    end
}
function die(plrnameee)

    local targetPartial = plrnameee
    
    local killl = workspace:FindFirstChild("Shark Tank",true)
    killl.TouchEvent:FireServer(targetPartial.Character.Head, killl.Shark)
end

function kill(textt)

    local targetPartial = textt
    
         while getgenv().kill do
         wait(0.1)
         local success, errormessage = pcall(function()
         local killl = workspace:FindFirstChild("Shark Tank",true)
         killl.TouchEvent:FireServer(targetPartial.Character.Head, killl.Shark)
         wait(0.1)
             end)
         end 
    end
    function looprefreashh()
        spawn(function()
            while getgenv().refreash do 
            task.wait(15)
            MyDropdown:Clear()
            wait(1)
            MyDropdown:AddItems({
                game.Players:GetChildren()[2],
                game.Players:GetChildren()[3],
                game.Players:GetChildren()[4],
                game.Players:GetChildren()[5],
                game.Players:GetChildren()[6],
                game.Players:GetChildren()[7],
                game.Players:GetChildren()[8],
                game.Players:GetChildren()[9],
                game.Players:GetChildren()[10],
                game.Players:GetChildren()[11],
                game.Players:GetChildren()[12],	
            })
                end
            end)
            spawn(function()
                while getgenv().refreash do 
                task.wait(15)
                Dropdwn:Clear()
                wait(1)
                Dropdwn:AddItems({
                    game.Players:GetChildren()[2],
                    game.Players:GetChildren()[3],
                    game.Players:GetChildren()[4],
                    game.Players:GetChildren()[5],
                    game.Players:GetChildren()[6],
                    game.Players:GetChildren()[7],
                    game.Players:GetChildren()[8],
                    game.Players:GetChildren()[9],
                    game.Players:GetChildren()[10],
                    game.Players:GetChildren()[11],
                    game.Players:GetChildren()[12],	
                })
                    end
                end)
                spawn(function()
                    while getgenv().refreash do 
                    task.wait(15)
                    Dropdwn1:Clear()
                    wait(1)
                    Dropdwn1:AddItems({
                        game.Players:GetChildren()[2],
                        game.Players:GetChildren()[3],
                        game.Players:GetChildren()[4],
                        game.Players:GetChildren()[5],
                        game.Players:GetChildren()[6],
                        game.Players:GetChildren()[7],
                        game.Players:GetChildren()[8],
                        game.Players:GetChildren()[9],
                        game.Players:GetChildren()[10],
                        game.Players:GetChildren()[11],
                        game.Players:GetChildren()[12],	
                    })
                        end
                    end)
                    spawn(function()
                        while getgenv().refreash do 
                        task.wait(15)
                        Dropdwn2:Clear()
                        wait(1)
                        Dropdwn2:AddItems({
                            game.Players:GetChildren()[2],
                            game.Players:GetChildren()[3],
                            game.Players:GetChildren()[4],
                            game.Players:GetChildren()[5],
                            game.Players:GetChildren()[6],
                            game.Players:GetChildren()[7],
                            game.Players:GetChildren()[8],
                            game.Players:GetChildren()[9],
                            game.Players:GetChildren()[10],
                            game.Players:GetChildren()[11],
                            game.Players:GetChildren()[12],	
                        })
                            end
                        end)
                    end
55, 255)),
							ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
							ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
							ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
						}
					})

					local hueDraggable = hueArea:object("TextButton", {
						Centered = true,
						Text = "",
						BackgroundTransparency = 1,
						Size = UDim2.new(0, 3, 1, 0),
						ZIndex = 20
					})

					local _hueDraggableStroke = hueDraggable:object("UIStroke", {
						Transparency = 1,
						Color = Color3.fromRGB(255, 255, 255),
						Thickness = 1.6,
						ApplyStrokeMode = Enum.ApplyStrokeMode.Border
					})

					local label = holder:object("TextLabel", {
						Text = "Color Picker",
						Font = Enum.Font.SourceSansBold,
						AnchorPoint = Vector2.new(1,0),
						BackgroundTransparency = 1,
						Position = UDim2.fromScale(1, 0),
						Size = UDim2.new(0.5, 0,0, 20),
						Theme = {TextColor3 = {"Tertiary", 15}},
						TextSize = 15,
						TextTransparency = 1
					})

					local infos = holder:object("Frame", {
						AnchorPoint = Vector2.new(1, 0),
						BackgroundTransparency = 1,
						Position = UDim2.new(1, 0,0, 25),
						Size = UDim2.new(0.5, 0,0, 60)
					})

					local _infosList = infos:object("UIListLayout", {
						Padding = UDim.new(0, 4),
						HorizontalAlignment = Enum.HorizontalAlignment.Center,
						SortOrder = Enum.SortOrder.Name
					})

					local r = infos:object("TextLabel", {
						AnchorPoint = Vector2.new(0.5, 0),
						Name = "1",
						Text = tostring(selectedColor.R * 255),
						Theme = {BackgroundColor3 = {"Secondary", 12}},
						Size = UDim2.new(1, -10,0, 18),
						TextColor3 = Color3.fromHSV(0, 0.8, 1),
						TextSize = 14,
						BackgroundTransparency = 1,
						TextTransparency = 1
					}):round(4)

					local g = infos:object("TextLabel", {
						AnchorPoint = Vector2.new(0.5, 0),
						Name = "2",
						Text = tostring(selectedColor.G * 255),
						Theme = {BackgroundColor3 = {"Secondary", 12}},
						Size = UDim2.new(1, -10,0, 18),
						TextColor3 = Color3.fromHSV(120/360, 0.8, 1),
						TextSize = 14,
						BackgroundTransparency = 1,
						TextTransparency = 1
					}):round(4)

					local b = infos:object("TextLabel", {
						AnchorPoint = Vector2.new(0.5, 0),
						Text = tostring(selectedColor.B * 255),
						Name = "3",
						Theme = {BackgroundColor3 = {"Secondary", 12}},
						Size = UDim2.new(1, -10,0, 18),
						TextColor3 = Color3.fromHSV(240/360, 0.8, 1),
						TextSize = 14,
						BackgroundTransparency = 1,
						TextTransparency = 1
					}):round(4)

					local pickBtn = holder:object("ImageButton", {
						AnchorPoint = Vector2.new(1, 1),
						Theme = {BackgroundColor3 = "Tertiary"},
						Position = UDim2.fromScale(1, 1),
						Size = UDim2.new(0.5, 0,0, 20),
						Image = "rbxassetid://8593962406",
						ScaleType = Enum.ScaleType.Fit,
						BackgroundTransparency = 1,
						ImageTransparency = 1
					}):round(6)

					local previewLight = holder:object("Frame", {
						AnchorPoint = Vector2.new(1, 1),
						BackgroundColor3 = selectedColor,
						Position = UDim2.new(1, -65,1, -25),
						Size = UDim2.fromOffset(40, 40),
						BackgroundTransparency = 1
					}):round(5)

					local _previewLightIcon = previewLight:object("ImageLabel", {
						Centered = true,
						BackgroundTransparency = 1,
						Size = UDim2.fromScale(.6, .6),
						Image = "rbxassetid://8593995344",
						ImageColor3 = Color3.fromRGB(255, 255, 255),
						ImageTransparency = 1
					})

					local previewDark = holder:object("Frame", {
						AnchorPoint = Vector2.new(1, 1),
						BackgroundColor3 = selectedColor,
						Position = UDim2.new(1, -15,1, -25),
						Size = UDim2.fromOffset(40, 40),
						BackgroundTransparency = 1
					}):round(5)

					local _previewDarkIcon = previewDark:object("ImageLabel", {
						Centered = true,
						BackgroundTransparency = 1,
						Size = UDim2.fromScale(.6, .6),
						Image = "rbxassetid://8593995344",
						ImageColor3 = Color3.fromRGB(0, 0, 0),
						ImageTransparency = 1
					})


					-- hacky fix for zindex issue
					for _, v in next, darkener.AbsoluteObject:GetDescendants() do
						pcall(function()
							v.ZIndex += 3
						end)
					end

					local function globalUpdate()
						r.Text = tostring(math.floor(selectedColor.R * 255))
						g.Text = tostring(math.floor(selectedColor.G * 255))
						b.Text = tostring(math.floor(selectedColor.B * 255))
						previewDark:tween({BackgroundColor3 = selectedColor})
						previewLight:tween({BackgroundColor3 = selectedColor})
					end
					-- HUE
					do
						updateHue = function()
							hue = math.clamp((Mouse.X - hueArea.AbsolutePosition.X) / (hueArea.AbsoluteSize.X), 0, 1)
							local newXPos = math.clamp((Mouse.X - hueArea.AbsolutePosition.X) / (hueArea.AbsoluteSize.X) * hueArea.AbsoluteSize.X, 0, hueArea.AbsoluteSize.X)
							selectedColor = Color3.fromHSV(hue, sat, val)
							color:tween({Length = 0.05, BackgroundColor3 = Color3.fromHSV(hue, 1, 1)})
							hueDraggable:tween({Length = 0.05, Position = UDim2.new(0, math.clamp(newXPos, 0, hueArea.AbsoluteSize.X), .5, 0)})

							globalUpdate()
						end


						local down = false

						hueArea.MouseButton1Down:Connect(function()
							down = true
							while RunService.RenderStepped:Wait() and down do
								updateHue()
							end
						end)

						hueDraggable.MouseButton1Down:connect(function()
							down = true
							while RunService.RenderStepped:Wait() and down do
								updateHue()
							end
						end)

						UserInputService.InputEnded:Connect(function(key)
							if key.UserInputType == Enum.UserInputType.MouseButton1 then
								if down then
									down = false
								end
							end
						end)
					end


					-- SAT & VALUE [PICKER]
					do
						local down = false

						updatePicker = function()
							sat = math.clamp((Mouse.X - pickerArea.AbsolutePosition.X) / (pickerArea.AbsoluteSize.X), 0, 1)
							val = 1 - math.clamp((Mouse.Y - pickerArea.AbsolutePosition.Y) / (pickerArea.AbsoluteSize.Y), 0, 1)

							local newXPos = math.clamp((Mouse.X - pickerArea.AbsolutePosition.X) / (pickerArea.AbsoluteSize.X) * pickerArea.AbsoluteSize.X, 0, pickerArea.AbsoluteSize.X)
							local newYPos = math.clamp((Mouse.Y - pickerArea.AbsolutePosition.Y) / (pickerArea.AbsoluteSize.Y) * pickerArea.AbsoluteSize.Y, 0, pickerArea.AbsoluteSize.Y)

							selectedColor = Color3.fromHSV(hue, sat, val)

							globalUpdate()

							colorPickerDraggable:tween({Position = UDim2.fromOffset(newXPos, newYPos), Length = 0.05})
						end

						pickerArea.MouseButton1Down:Connect(function()
							down = true
							while RunService.RenderStepped:wait() and down do
								updatePicker()
							end
						end)

						UserInputService.InputEnded:Connect(function(key)
							if key.UserInputType == Enum.UserInputType.MouseButton1 then
								if down then
									down = false
								end
							end
						end)
					end

					-- input n shit
					do
						local down = false
						local hovered = false

						pickBtn.MouseEnter:connect(function()
							hovered = true
							pickBtn:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Tertiary, 10)}
						end)

						pickBtn.MouseLeave:connect(function()
							hovered = false
							if not down then
								pickBtn:tween{BackgroundColor3 = Library.CurrentTheme.Tertiary}
							end
						end)

						pickBtn.MouseButton1Down:connect(function()
							pickBtn:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Tertiary, 20)}
						end)

						UserInputService.InputEnded:connect(function(key)
							if key.UserInputType == Enum.UserInputType.MouseButton1 then
								pickBtn:tween{BackgroundColor3 = (hovered and self:lighten(Library.CurrentTheme.Tertiary)) or Library.CurrentTheme.Tertiary}
							end
						end)

						pickBtn.MouseButton1Click:connect(function()
							fadeOut()
							icon:tween({ImageColor3 = selectedColor})
							options.Callback(selectedColor)
							task.delay(0.35, function()
								Library._colorPickerExists = false
							end)
						end)
					end

					--show fade in
					holder:tween({BackgroundTransparency = 0, Length = 0.1})
					_holderStroke:tween({Transparency = 0, Length = 0.1})
					pickerArea:tween({BackgroundTransparency = 0, Length = 0.1})
					_pickerAreaStroke:tween({Transparency = 0, Length = 0.1})
					color:tween({BackgroundTransparency = 0, Length = 0.1})
					brightness:tween({BackgroundTransparency = 0, Length = 0.1})
					black:tween({BackgroundTransparency = 0, Length = 0.1})
					_colorPickerDraggableStroke:tween({Transparency = 0, Length = 0.1})
					hueArea:tween({BackgroundTransparency = 0, Length = 0.1})
					_hueAreaStroke:tween({Transparency = 0, Length = 0.1})
					_hueDraggableStroke:tween({Transparency = 0, Length = 0.1})
					label:tween{TextTransparency = 0, Length = 0.1}
					r:tween({
						BackgroundTransparency = 0,
						TextTransparency = 0,
						Length = 0.1
					})
					g:tween({
						BackgroundTransparency = 0,
						TextTransparency = 0,
						Length = 0.1
					})
					b:tween({
						BackgroundTransparency = 0,
						TextTransparency = 0,
						Length = 0.1
					})
					pickBtn:tween({
						BackgroundTransparency = 0,
						ImageTransparency = 0,
						Length = 0.1
					})
					previewLight:tween({BackgroundTransparency = 0, Length = 0.1})
					_previewLightIcon:tween({ImageTransparency = 0, Length = 0.1})
					previewDark:tween({BackgroundTransparency = 0, Length = 0.1})
					_previewDarkIcon:tween({ImageTransparency = 0, Length = 0.1})
					darkener:tween({BackgroundTransparency = 0.5, Length = 0.1})
					-- fade out
					-- closing fade in
					fadeOut = function()
						holder:tween({BackgroundTransparency = 1, Length = 0.1})
						_holderStroke:tween({Transparency = 1, Length = 0.1})
						pickerArea:tween({BackgroundTransparency = 1, Length = 0.1})
						_pickerAreaStroke:tween({Transparency = 1, Length = 0.1})
						color:tween({BackgroundTransparency = 1, Length = 0.1})
						brightness:tween({BackgroundTransparency = 1, Length = 0.1})
						black:tween({BackgroundTransparency = 1, Length = 0.1})
						_colorPickerDraggableStroke:tween({Transparency = 1, Length = 0.1})
						hueArea:tween({BackgroundTransparency = 1, Length = 0.1})
						_hueAreaStroke:tween({Transparency = 1, Length = 0.1})
						_hueDraggableStroke:tween({Transparency = 1, Length = 0.1})
						label:tween{TextTransparency = 1, Length = 0.1}
						r:tween({
							BackgroundTransparency = 1,
							TextTransparency = 1,
							Length = 0.1
						})
						g:tween({
							BackgroundTransparency = 1,
							TextTransparency = 1,
							Length = 0.1
						})
						b:tween({
							BackgroundTransparency = 1,
							TextTransparency = 1,
							Length = 0.1
						})
						pickBtn:tween({
							BackgroundTransparency = 1,
							ImageTransparency = 1,
							Length = 0.1
						})
						previewLight:tween({BackgroundTransparency = 1, Length = 0.1})
						_previewLightIcon:tween({ImageTransparency = 1, Length = 0.1})
						previewDark:tween({BackgroundTransparency = 1, Length = 0.1})
						_previewDarkIcon:tween({ImageTransparency = 1, Length = 0.1})

						darkener:tween({BackgroundTransparency = 1, Length = 0.1}, function()
							task.delay(0.25, function()
								darkener.AbsoluteObject:Destroy()
							end)
						end)
					end
				end
			end
		end)
	end
	self:_resize_tab()
end

function Library:credit(options)
	options = self:set_defaults({
		Name = "Creditor",
		Description = nil
	}, options)
	options.V3rmillion = options.V3rmillion or options.V3rm

	local creditContainer = (self.creditsContainer or self.container):object("Frame", {
		Theme = {BackgroundColor3 = "Secondary"},
		Size = UDim2.new(1, -20, 0, 52)
	}):round(7)

	local name = creditContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, (options.Description and 5) or 0),
		Size = (options.Description and UDim2.new(0.5, -10, 0, 22)) or UDim2.new(0.5, -10, 1, 0),
		Text = options.Name,
		TextSize = 22,
		Theme = {TextColor3 = "StrongText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})

	if options.Description then
		local description = creditContainer:object("TextLabel", {
			BackgroundTransparency = 1,
			Position = UDim2.fromOffset(10, 27),
			Size = UDim2.new(0.5, -10, 0, 20),
			Text = options.Description,
			TextSize = 18,
			Theme = {TextColor3 = "WeakText"},
			TextXAlignment = Enum.TextXAlignment.Left
		})
	end

	if setclipboard then
		if options.Discord then
			local discordContainer = creditContainer:object("TextButton", {
				AnchorPoint = Vector2.new(1, 1),
				Size = UDim2.fromOffset(24, 24),
				Position = UDim2.new(1, -8, 1, -8),
				BackgroundColor3 = Color3.fromRGB(88, 101, 242)
			}):round(5):tooltip("copy discord")
			local discord = discordContainer:object("Frame", {
				Size = UDim2.new(1, -6, 1, -6),
				Centered = true,
				BackgroundTransparency = 1
			})

			local tr = discord:object("ImageLabel", {
				BackgroundTransparency = 1,
				AnchorPoint = Vector2.new(1, 0),
				Size = UDim2.new(0.5, 0, 0.5, 0),
				Position = UDim2.new(1, 0, 0, -0),
				ImageColor3 = Color3.fromRGB(255, 255, 255),
				Image = "http://www.roblox.com/asset/?id=8594150191",
				ScaleType = Enum.ScaleType.Crop
			})

			local tl = discord:object("ImageLabel", {
				BackgroundTransparency = 1,
				AnchorPoint = Vector2.new(0, 0),
				Size = UDim2.new(0.5, 0, 0.5, 0),
				Position = UDim2.new(0, 0, 0, -0),
				ImageColor3 = Color3.fromRGB(255, 255, 255),
				Image = "http://www.roblox.com/asset/?id=8594187532",
				ScaleType = Enum.ScaleType.Crop
			})

			local bl = discord:object("ImageLabel", {
				BackgroundTransparency = 1,
				AnchorPoint = Vector2.new(0, 1),
				Size = UDim2.new(0.5, 0, 0.5, 0),
				Position = UDim2.new(0, 0, 1, 0),
				ImageColor3 = Color3.fromRGB(255, 255, 255),
				Image = "http://www.roblox.com/asset/?id=8594194954",
				ScaleType = Enum.ScaleType.Crop
			})

			local br = discord:object("ImageLabel", {
				BackgroundTransparency = 1,
				AnchorPoint = Vector2.new(1, 1),
				Size = UDim2.new(0.5, 0, 0.5, 0),
				Position = UDim2.new(1, 0, 1, 0),
				ImageColor3 = Color3.fromRGB(255, 255, 255),
				Image = "http://www.roblox.com/asset/?id=8594206483",
				ScaleType = Enum.ScaleType.Crop
			})

			discordContainer.MouseButton1Click:connect(function()
				setclipboard(options.Discord)
			end)
		end

		if options.V3rmillion then
			local v3rmillionContainer = creditContainer:object("TextButton", {
				AnchorPoint = Vector2.new(1, 1),
				Size = UDim2.fromOffset(24, 24),
				Position = UDim2.new(1, -40, 1, -8),
				Theme = {BackgroundColor3 = {"Main", 10}}
			}):round(5):tooltip("copy v3rm")
			local v3rmillion = v3rmillionContainer:object("ImageLabel", {
				Image = "http://www.roblox.com/asset/?id=8594086769",
				Size = UDim2.new(1, -4, 1, -4),
				Centered = true,
				BackgroundTransparency = 1
			})

			v3rmillionContainer.MouseButton1Click:connect(function()
				setclipboard(options.V3rmillion)
			end)
		end
	end


	self._resize_tab({
		container = self.creditsContainer or self.container,
		layout = (self.creditsContainer and self.creditsContainer.AbsoluteObject.UIListLayout) or self.layout
	})
end

function Library:_theme_selector()

	local themesCount = 0

	for _ in next, Library.Themes do
		themesCount += 1
	end

	local themeContainer = self.container:object("Frame", {
		Theme = {BackgroundColor3 = "Secondary"},
		Size = UDim2.new(1, -20, 0, 127)
	}):round(7)

	local text = themeContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, 5),
		Size = UDim2.new(0.5, -10, 0, 22),
		Text = "Theme",
		TextSize = 22,
		Theme = {TextColor3 = "StrongText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})

	local colorThemesContainer = themeContainer:object("Frame", {
		Size = UDim2.new(1, 0, 1, -32),
		BackgroundTransparency = 1,
		Position = UDim2.new(0.5, 0, 1, -5),
		AnchorPoint = Vector2.new(0.5, 1)
	})

	local grid = colorThemesContainer:object("UIGridLayout", {
		CellPadding = UDim2.fromOffset(10, 10),
		CellSize = UDim2.fromOffset(102, 83),
		VerticalAlignment = Enum.VerticalAlignment.Center
	})

	colorThemesContainer:object("UIPadding", {
		PaddingLeft = UDim.new(0, 10),
		PaddingTop = UDim.new(0, 5)
	})

	for themeName, themeColors in next, Library.Themes do
		local count = 0

		for _, color in next, themeColors do
			if not (type(color) == "boolean") then
				count += 1
			end
		end

		if count >= 5 then
			local theme = colorThemesContainer:object("TextButton", {
				BackgroundTransparency = 1
			})

			local themeColorsContainer = theme:object("Frame", {
				Size = UDim2.new(1, 0, 1, -20),
				BackgroundTransparency = 1
			}):round(5):stroke("WeakText", 1)

			local themeNameLabel = theme:object("TextLabel", {
				BackgroundTransparency = 1,
				Text = themeName,
				TextSize = 16,
				Theme = {TextColor3 = "StrongText"},
				Size = UDim2.new(1, 0, 0, 20),
				Position = UDim2.fromScale(0, 1),
				AnchorPoint = Vector2.new(0, 1)
			})

			local colorMain = themeColorsContainer:object("Frame", {
				Centered = true,
				Size = UDim2.fromScale(1, 1),
				BackgroundColor3 = themeColors.Main
			}):round(4)

			local colorSecondary = colorMain:object("Frame", {
				Centered = true,
				Size = UDim2.new(1, -16, 1, -16),
				BackgroundColor3 = themeColors.Secondary
			}):round(4)

			colorSecondary:object("UIListLayout", {
				Padding = UDim.new(0, 5)
			})

			colorSecondary:object("UIPadding", {
				PaddingTop = UDim.new(0, 5),
				PaddingLeft = UDim.new(0, 5)
			})

			local colorTertiary = colorSecondary:object("Frame", {
				Size = UDim2.new(1, -20, 0, 9),
				BackgroundColor3 = themeColors.Tertiary
			}):round(100)

			local colorStrong = colorSecondary:object("Frame", {
				Size = UDim2.new(1, -30, 0, 9),
				BackgroundColor3 = themeColors.StrongText
			}):round(100)

			local colorTertiary = colorSecondary:object("Frame", {
				Size = UDim2.new(1, -40, 0, 9),
				BackgroundColor3 = themeColors.WeakText
			}):round(100)

			theme.MouseButton1Click:connect(function()
				Library:change_theme(Library.Themes[themeName])
				updateSettings("Theme", themeName)
			end)
		end
	end
	self:_resize_tab()
end


function Library:keybind(options)
	options = self:set_defaults({
		Name = "Keybind",
		Keybind = nil,
		Description = nil,
		Callback = function() end
	}, options)

	local keybindContainer = self.container:object("TextButton", {
		Theme = {BackgroundColor3 = "Secondary"},
		Size = UDim2.new(1, -20, 0, 52)
	}):round(7)

	local text = keybindContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, (options.Description and 5) or 0),
		Size = (options.Description and UDim2.new(0.5, -10, 0, 22)) or UDim2.new(0.5, -10, 1, 0),
		Text = options.Name,
		TextSize = 22,
		Theme = {TextColor3 = "StrongText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})

	if options.Description then
		local description = keybindContainer:object("TextLabel", {
			BackgroundTransparency = 1,
			Position = UDim2.fromOffset(10, 27),
			Size = UDim2.new(0.5, -10, 0, 20),
			Text = options.Description,
			TextSize = 18,
			Theme = {TextColor3 = "WeakText"},
			TextXAlignment = Enum.TextXAlignment.Left
		})
	end


	local keybindDisplay = keybindContainer:object("TextLabel", {
		AnchorPoint = Vector2.new(1, 0),
		Theme = {
			BackgroundColor3 = {"Secondary", -20},
			TextColor3 = "WeakText"
		},
		Position = UDim2.new(1, -20,0, 16),
		Size = UDim2.new(0, 50,0, 20),
		TextSize = 12,
		Text = (options.Keybind and tostring(options.Keybind.Name):upper()) or "?"
	}):round(5):stroke("Tertiary")

	keybindDisplay.Size = UDim2.fromOffset(keybindDisplay.TextBounds.X + 20, 20)

	do
		local hovered = false
		local down = false
		local listening = false

		keybindContainer.MouseEnter:connect(function()
			hovered = true
			keybindContainer:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Secondary, 10)}
		end)

		keybindContainer.MouseLeave:connect(function()
			hovered = false
			if not down then
				keybindContainer:tween{BackgroundColor3 = Library.CurrentTheme.Secondary}
			end
		end)

		keybindContainer.MouseButton1Down:connect(function()
			keybindContainer:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Secondary, 20)}
		end)

		UserInputService.InputEnded:connect(function(key)
			if key.UserInputType == Enum.UserInputType.MouseButton1 then
				keybindContainer:tween{BackgroundColor3 = (hovered and self:lighten(Library.CurrentTheme.Secondary)) or Library.CurrentTheme.Secondary}
			end
		end)

		UserInputService.InputBegan:Connect(function(key, gameProcessed)
			if listening and not UserInputService:GetFocusedTextBox() then
				if key.UserInputType == Enum.UserInputType.Keyboard then
					if key.KeyCode ~= Enum.KeyCode.Escape then
						options.Keybind = key.KeyCode
					end
					keybindDisplay.Text = (options.Keybind and tostring(options.Keybind.Name):upper()) or "?"
					keybindDisplay:tween{Size = UDim2.fromOffset(keybindDisplay.TextBounds.X + 20, 20), Length = 0.05}
					listening = false
				end
			else
				if key.KeyCode == options.Keybind then
					options.Callback()
				end
			end
		end)

		keybindContainer.MouseButton1Click:connect(function()
			if not listening then listening = true; keybindDisplay.Text = "..." end
		end)
	end
	self:_resize_tab()

	local methods = {}

	function methods:Set(keycode)
		options.Keybind = keycode
		keybindDisplay.Text = (options.Keybind and tostring(options.Keybind.Name):upper()) or "?"
		keybindDisplay:tween{Size = UDim2.fromOffset(keybindDisplay.TextBounds.X + 20, 20), Length = 0.05}
	end

	return methods
end

function Library:prompt(options)
	options = self:set_defaults({
		Followup = false,
		Title = "Prompt",
		Text = "yo momma dead",
		Buttons = {
			ok = function()
				return true
			end
		}
	}, options)

	if Library._promptExists and not options.Followup then return end
	Library._promptExists = true

	local count = 0; for a, _ in next, options.Buttons do
		count += 1
	end

	local darkener = self.core:object("Frame", {
		BackgroundColor3 = Color3.new(0, 0, 0),
		BackgroundTransparency = 1,
		Size = UDim2.fromScale(1, 1)
	}):round(10)

	local promptContainer = darkener:object("Frame", {
		Theme = {BackgroundColor3 = "Main"},
		BackgroundTransparency = 1,
		Centered = true,
		Size = UDim2.fromOffset(200, 120)
	}):round(6)

	local _promptContainerStroke = promptContainer:object("UIStroke", {
		Theme = {Color = "Tertiary"},
		ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
		Transparency = 1
	})

	local _padding = promptContainer:object("UIPadding", {
		PaddingTop = UDim.new(0, 5),
		PaddingLeft = UDim.new(0, 5),
		PaddingBottom = UDim.new(0, 5),
		PaddingRight = UDim.new(0, 5)
	})

	local promptTitle = promptContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Size = UDim2.new(1, 0, 0, 20),
		TextXAlignment = Enum.TextXAlignment.Center,
		Font = Enum.Font.SourceSansBold,
		Text = options.Title,
		Theme = {TextColor3 = {"Tertiary", 15}},
		TextSize = 16,
		TextTransparency = 1
	})

	local promptText = promptContainer:object("TextLabel", {
		AnchorPoint = Vector2.new(0.5, 0),
		BackgroundTransparency = 1,
		Position = UDim2.new(0.5, 0,0, 26),
		Size = UDim2.new(1, -20,1, -60),
		TextSize = 14,
		Theme = {TextColor3 = "StrongText"},

		Text = options.Text,
		TextTransparency = 1,
		TextYAlignment = Enum.TextYAlignment.Top,
		TextXAlignment = Enum.TextXAlignment.Center,
		TextWrapped = true,
		TextTruncate = Enum.TextTruncate.AtEnd
	})

	local buttonHolder = promptContainer:object("Frame", {
		BackgroundTransparency = 1,
		AnchorPoint = Vector2.new(0, 1),
		Position = UDim2.new(0, 0,1, -5),
		Size = UDim2.new(1, 0,0, 20)
	})

	local _gridButtonHolder = buttonHolder:object("UIGridLayout", {
		CellPadding = UDim2.new(0, 10,0, 5),
		CellSize = UDim2.new(1/count, -10, 1, 0),
		FillDirection = Enum.FillDirection.Horizontal,
		HorizontalAlignment = Enum.HorizontalAlignment.Center
	})

	darkener:tween({BackgroundTransparency = 0.4, Length = 0.1})
	promptContainer:tween({BackgroundTransparency = 0, Length = 0.1})
	promptTitle:tween({TextTransparency = 0, Length = 0.1})
	_promptContainerStroke:tween({Transparency = 0, Length = 0.1})
	promptText:tween({TextTransparency = 0, Length = 0.1})

	local _temporaryPromptButtons = {}

	for text, callback in next, options.Buttons do
		local button = buttonHolder:object("TextButton", {
			AnchorPoint = Vector2.new(1, 1),
			Theme = {BackgroundColor3 = "Tertiary"},
			Text = tostring(text):upper(),
			TextSize = 13,
			Font = Enum.Font.SourceSansBold,
			BackgroundTransparency = 1,
			TextTransparency = 1
		}):round(4)

		table.insert(_temporaryPromptButtons, button)

		do
			button:tween({TextTransparency = 0, BackgroundTransparency = 0})

			local hovered = false
			local down = false

			button.MouseEnter:connect(function()
				hovered = true
				button:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Tertiary, 10)}
			end)

			button.MouseLeave:connect(function()
				hovered = false
				if not down then
					button:tween{BackgroundColor3 = Library.CurrentTheme.Tertiary}
				end
			end)

			button.MouseButton1Down:connect(function()
				button:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Tertiary, 20)}
			end)

			UserInputService.InputEnded:connect(function(key)
				if key.UserInputType == Enum.UserInputType.MouseButton1 then
					button:tween{BackgroundColor3 = (hovered and self:lighten(Library.CurrentTheme.Tertiary)) or Library.CurrentTheme.Tertiary}
				end
			end)

			button.MouseButton1Click:connect(function()
				promptContainer:tween({BackgroundTransparency = 1, Length = 0.1})
				promptTitle:tween({TextTransparency = 1, Length = 0.1})
				_promptContainerStroke:tween({Transparency = 1, Length = 0.1})
				promptText:tween({TextTransparency = 1, Length = 0.1})
				for i, b in next, _temporaryPromptButtons do
					b:tween({TextTransparency = 1, BackgroundTransparency = 1, Length = 0.1})
				end
				darkener:tween({BackgroundTransparency = 1, Length = 0.1}, function()
					darkener.AbsoluteObject:Destroy()
					task.delay(0.25, function()
						Library._promptExists = false
					end)
					callback()
				end)
			end)
		end
	end
end

function Library:cp(options)
	return Library.color_picker(self, options)
end
function Library:colorpicker(options)
	return Library.color_picker(self, options)
end

function Library:slider(options)
	options = self:set_defaults({
		Name = "Slider",
		Default = 50,
		Min = 0,
		Max = 100,
		Callback = function() end
	}, options)


	local sliderContainer = self.container:object("TextButton", {
		Theme = {BackgroundColor3 = "Secondary"},
		Size = UDim2.new(1, -20, 0, 56)
	}):round(7)

	local text = sliderContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, 5),
		Size = UDim2.new(0.5, -10, 0, 22),
		Text = options.Name,
		TextSize = 22,
		Theme = {TextColor3 = "StrongText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})

	if options.Description then
		local description = sliderContainer:object("TextLabel", {
			BackgroundTransparency = 1,
			Position = UDim2.fromOffset(10, 27),
			Size = UDim2.new(0.5, -10, 0, 20),
			Text = options.Description,
			TextSize = 18,
			Theme = {TextColor3 = "WeakText"},
			TextXAlignment = Enum.TextXAlignment.Left
		})
		sliderContainer.Size = UDim2.new(1, -20, 0, 76)
	end

	local valueText = sliderContainer:object("TextLabel", {
		AnchorPoint = Vector2.new(1, 0),

		Theme = {
			BackgroundColor3 = {"Secondary", -20},
			TextColor3 = "WeakText"
		},
		Position = UDim2.new(1, -10, 0, 10),
		Size = UDim2.new(0, 50,0, 20),
		TextSize = 12,
		Text = options.Default
	}):round(5):stroke("Tertiary")

	valueText.Size = UDim2.fromOffset(valueText.TextBounds.X + 20, 20)

	local sliderBar = sliderContainer:object("Frame", {
		Theme = {BackgroundColor3 = {"Secondary", -20}},
		AnchorPoint = Vector2.new(0.5, 1),
		Size = UDim2.new(1, -20, 0, 5),
		Position = UDim2.new(0.5, 0, 1, -12)
	}):round(100)

	local sliderLine = sliderBar:object("Frame", {
		Size = UDim2.fromScale(((options.Default - options.Min) / (options.Max - options.Min)), 1),
		Theme = {BackgroundColor3 = "Tertiary"}

	}):round(100)

	local sliderBall = sliderLine:object("Frame", {
		AnchorPoint = Vector2.new(0.5, 0.5),
		Position = UDim2.fromScale(1, 0.5),
		Size = UDim2.fromOffset(14, 14),
		Theme = {BackgroundColor3 = {"Tertiary", 20}}
	}):round(100)

	do
		local hovered = false
		local down = false

		sliderContainer.MouseEnter:connect(function()
			hovered = true
			sliderContainer:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Secondary, 10)}
		end)

		sliderContainer.MouseLeave:connect(function()
			hovered = false
			if not down then
				sliderContainer:tween{BackgroundColor3 = Library.CurrentTheme.Secondary}
			end
		end)

		UserInputService.InputEnded:connect(function(key)
			if key.UserInputType == Enum.UserInputType.MouseButton1 then
				down = false
				sliderContainer:tween{BackgroundColor3 = (hovered and self:lighten(Library.CurrentTheme.Secondary)) or Library.CurrentTheme.Secondary}
			end
		end)

		sliderContainer.MouseButton1Down:connect(function()
			sliderContainer:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Secondary, 20)}
			down = true
			local tween = valueText:tween{Size = UDim2.fromOffset(valueText.TextBounds.X + 20, 20)}
			while RunService.RenderStepped:wait() and down do
				local percentage = math.clamp((Mouse.X - sliderBar.AbsolutePosition.X) / (sliderBar.AbsoluteSize.X), 0, 1)
				local value = ((options.Max - options.Min) * percentage) + options.Min
				value = math.floor(value)
				valueText.Text = value
				if tween.PlaybackState == Enum.PlaybackState.Completed then
					tween = valueText:tween{Size = UDim2.fromOffset(valueText.TextBounds.X + 20, 20)}
				end
				sliderLine:tween{
					Length = 0.06,
					Size = UDim2.fromScale(percentage, 1)
				}
				options.Callback(value)
			end
		end)
	end
	self:_resize_tab()

	local methods = {}

	function methods:Set(value)
		sliderLine:tween{Size = UDim2.fromScale(((value - options.Min) / (options.Max - options.Min)), 1)}
	end

	return methods
end

function Library:textbox(options)
	options = self:set_defaults({
		Name = "Text Box",
		Placeholder = "Type something..",
		Description = nil,
		Callback = function(t) end
	}, options)

	local textboxContainer = self.container:object("TextButton", {
		Theme = {BackgroundColor3 = "Secondary"},
		Size = UDim2.new(1, -20, 0, 52)
	}):round(7)

	local text = textboxContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, (options.Description and 5) or 0),
		Size = (options.Description and UDim2.new(0.5, -10, 0, 22)) or UDim2.new(0.5, -10, 1, 0),
		Text = options.Name,
		TextSize = 22,
		Theme = {TextColor3 = "StrongText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})

	if options.Description then
		local description = textboxContainer:object("TextLabel", {
			BackgroundTransparency = 1,
			Position = UDim2.fromOffset(10, 27),
			Size = UDim2.new(0.5, -10, 0, 20),
			Text = options.Description,
			TextSize = 18,
			Theme = {TextColor3 = "WeakText"},
			TextXAlignment = Enum.TextXAlignment.Left
		})
	end


	local textBox = textboxContainer:object("TextBox", {
		AnchorPoint = Vector2.new(1, 0),
		Theme = {
			BackgroundColor3 = {"Secondary", -20},
			TextColor3 = "WeakText"
		},
		Position = UDim2.new(1, -50,0, 16),
		Size = UDim2.new(0, 50,0, 20),
		TextSize = 12,
		PlaceholderText = options.Placeholder,
		ClipsDescendants = true
	}):round(5):stroke("Tertiary")

	local writeIcon = textboxContainer:object("ImageLabel", {
		Image = "http://www.roblox.com/asset/?id=8569329416",
		AnchorPoint = Vector2.new(1, 0.5),
		BackgroundTransparency = 1,
		Position = UDim2.new(1, -13, 0.5, 0),
		Size = UDim2.new(0, 16, 0, 16),
		Theme = {ImageColor3 = "StrongText"}
	})



	textBox.Size = UDim2.fromOffset(textBox.TextBounds.X + 20, 20)

	do
		local hovered = false
		local down = false
		local focused = false

		textboxContainer.MouseEnter:connect(function()
			textboxContainer:tween{BackgroundColor3 = self:lighten(Library.CurrentTheme.Secondary, 10)}
		end)

		textboxContainer.MouseLeave:connect(function()
			hovered = false
			if not down then
				textboxContainer:tween{BackgroundColor3 = Library.CurrentTheme.Secondary}
			end
		end)

		textBox.Focused:connect(function()
			focused = true
			while focused and RunService.RenderStepped:wait() do
				textBox.AbsoluteObject:TweenSize(
					UDim2.fromOffset(math.clamp(textBox.TextBounds.X + 20, 0, 0.5 * textboxContainer.AbsoluteSize.X), 20),
					Enum.EasingDirection.InOut,
					Enum.EasingStyle.Linear,
					0.1,
					true
				)
			end
		end)

		textBox.FocusLost:connect(function()
			focused = false
			textBox.AbsoluteObject:TweenSize(
				UDim2.fromOffset(math.clamp(textBox.TextBounds.X + 20, 0, 0.5 * textboxContainer.AbsoluteSize.X), 20),
				Enum.EasingDirection.InOut,
				Enum.EasingStyle.Linear,
				0.1,
				true
			)
			options.Callback(textBox.Text)
		end)
	end
	self:_resize_tab()

	local methods = {}

	function methods:Set(text)
		textBox.Text = text
	end

	return methods
end

function Library:label(options)

	options = self:set_defaults({
		Text = "Label title",
		Description = "Label text",
	}, options)

	local labelContainer = self.container:object("TextButton", {
		Theme = {BackgroundColor3 = "Secondary"},
		Size = UDim2.new(1, -20, 0, 52),
		BackgroundTransparency = 1
	}):round(7):stroke("Secondary", 2)

	local text = labelContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(10, 5),
		Size = UDim2.new(0.5, -10, 0, 22),
		Text = options.Text,
		TextSize = 22,
		Theme = {TextColor3 = "StrongText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})

	local description = labelContainer:object("TextLabel", {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, 10, 1, -5),
		Size = UDim2.new(0.5, -10, 1, -22),
		Text = options.Description,
		TextSize = 18,
		AnchorPoint = Vector2.new(0, 1),
		Theme = {TextColor3 = "WeakText"},
		TextXAlignment = Enum.TextXAlignment.Left
	})
	
	self:_resize_tab()

	local methods = {}

	function methods:SetText(txt)
		text.Text = txt
	end
	
	function methods:SetDescription(txt)
		description.Text = txt
	end

	return methods
end

return setmetatable(Library, {
	__index = function(_, i)
		return rawget(Library, i:lower())
	end
})
